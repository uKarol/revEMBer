{
      "name": "void mem_overflow_check_raw(void *p, size_t size, const char *descr1, const char *descr2)",
      "parameters": [
            [
                  {
                        "param_type": "void*",
                        "param_name": "p"
                  },
                  {
                        "param_type": "size_t",
                        "param_name": "size"
                  },
                  {
                        "param_type": "const char*",
                        "param_name": "descr1"
                  },
                  {
                        "param_type": "const char*",
                        "param_name": "descr2"
                  }
            ]
      ],
      "begin": 97,
      "end": 128,
      "returns": [],
      "warnings": [],
      "revember_artifacts": []
}{
      "name": "void mem_overflow_init_raw(void *p, size_t size)",
      "parameters": [
            [
                  {
                        "param_type": "void*",
                        "param_name": "p"
                  },
                  {
                        "param_type": "size_t",
                        "param_name": "size"
                  }
            ]
      ],
      "begin": 135,
      "end": 150,
      "returns": [],
      "warnings": [],
      "revember_artifacts": []
}{
      "name": "void mem_init(void)",
      "parameters": [
            [
                  {
                        "param_type": "void",
                        "param_name": ""
                  }
            ]
      ],
      "begin": 516,
      "end": 544,
      "returns": [],
      "warnings": [],
      "revember_artifacts": []
}{
      "name": "void * mem_trim(void *mem, mem_size_t size)",
      "parameters": [
            [
                  {
                        "param_type": "void*",
                        "param_name": "mem"
                  },
                  {
                        "param_type": "mem_size_t",
                        "param_name": "size"
                  }
            ]
      ],
      "begin": 169,
      "end": 172,
      "returns": [
            {
                  "begin": 171,
                  "end": 171,
                  "need_brackets": false,
                  "returned_value": "mem",
                  "return_warning": ""
            }
      ],
      "warnings": [],
      "revember_artifacts": []
}{
      "name": "void * mem_malloc(mem_size_t size)",
      "parameters": [
            [
                  {
                        "param_type": "mem_size_t",
                        "param_name": "size"
                  }
            ]
      ],
      "begin": 251,
      "end": 297,
      "returns": [
            {
                  "begin": 271,
                  "end": 271,
                  "need_brackets": false,
                  "returned_value": "NULL",
                  "return_warning": ""
            },
            {
                  "begin": 279,
                  "end": 279,
                  "need_brackets": false,
                  "returned_value": "NULL",
                  "return_warning": ""
            },
            {
                  "begin": 296,
                  "end": 296,
                  "need_brackets": false,
                  "returned_value": "ret",
                  "return_warning": ""
            }
      ],
      "warnings": [],
      "revember_artifacts": []
}{
      "name": "void mem_free(void *rmem)",
      "parameters": [
            [
                  {
                        "param_type": "void*",
                        "param_name": "rmem"
                  }
            ]
      ],
      "begin": 617,
      "end": 685,
      "returns": [
            {
                  "begin": 623,
                  "end": 623,
                  "need_brackets": false,
                  "returned_value": "",
                  "return_warning": ""
            },
            {
                  "begin": 630,
                  "end": 630,
                  "need_brackets": false,
                  "returned_value": "",
                  "return_warning": ""
            },
            {
                  "begin": 642,
                  "end": 642,
                  "need_brackets": false,
                  "returned_value": "",
                  "return_warning": ""
            },
            {
                  "begin": 656,
                  "end": 656,
                  "need_brackets": false,
                  "returned_value": "",
                  "return_warning": ""
            },
            {
                  "begin": 665,
                  "end": 665,
                  "need_brackets": false,
                  "returned_value": "",
                  "return_warning": ""
            }
      ],
      "warnings": [],
      "revember_artifacts": []
}{
      "name": "static void mem_overflow_init_element(struct mem *mem, mem_size_t user_size)",
      "parameters": [
            [
                  {
                        "param_type": "struct mem*",
                        "param_name": "mem"
                  },
                  {
                        "param_type": "mem_size_t",
                        "param_name": "user_size"
                  }
            ]
      ],
      "begin": 432,
      "end": 436,
      "returns": [],
      "warnings": [],
      "revember_artifacts": []
}{
      "name": "static void mem_overflow_check_element(struct mem *mem)",
      "parameters": [
            [
                  {
                        "param_type": "struct mem*",
                        "param_name": "mem"
                  }
            ]
      ],
      "begin": 440,
      "end": 443,
      "returns": [],
      "warnings": [],
      "revember_artifacts": []
}{
      "name": "static struct mem * ptr_to_mem(mem_size_t ptr)",
      "parameters": [
            [
                  {
                        "param_type": "mem_size_t",
                        "param_name": "ptr"
                  }
            ]
      ],
      "begin": 451,
      "end": 453,
      "returns": [
            {
                  "begin": 452,
                  "end": 452,
                  "need_brackets": false,
                  "returned_value": "(struct mem *)(void *)&ram[ptr]",
                  "return_warning": "compound return value"
            }
      ],
      "warnings": [],
      "revember_artifacts": []
}{
      "name": "static mem_size_t mem_to_ptr(void *mem)",
      "parameters": [
            [
                  {
                        "param_type": "void*",
                        "param_name": "mem"
                  }
            ]
      ],
      "begin": 457,
      "end": 459,
      "returns": [
            {
                  "begin": 458,
                  "end": 458,
                  "need_brackets": false,
                  "returned_value": "(mem_size_t)((u8_t *)mem - ram)",
                  "return_warning": "compound return value"
            }
      ],
      "warnings": [],
      "revember_artifacts": []
}{
      "name": "static void plug_holes(struct mem *mem)",
      "parameters": [
            [
                  {
                        "param_type": "struct mem*",
                        "param_name": "mem"
                  }
            ]
      ],
      "begin": 474,
      "end": 509,
      "returns": [],
      "warnings": [],
      "revember_artifacts": []
}{
      "name": "static int mem_link_valid(struct mem *mem)",
      "parameters": [
            [
                  {
                        "param_type": "struct mem*",
                        "param_name": "mem"
                  }
            ]
      ],
      "begin": 551,
      "end": 563,
      "returns": [
            {
                  "begin": 560,
                  "end": 560,
                  "need_brackets": false,
                  "returned_value": "0",
                  "return_warning": ""
            },
            {
                  "begin": 562,
                  "end": 562,
                  "need_brackets": false,
                  "returned_value": "1",
                  "return_warning": ""
            }
      ],
      "warnings": [],
      "revember_artifacts": []
}{
      "name": "static void mem_sanity(void)",
      "parameters": [
            [
                  {
                        "param_type": "void",
                        "param_name": ""
                  }
            ]
      ],
      "begin": 568,
      "end": 606,
      "returns": [],
      "warnings": [],
      "revember_artifacts": []
}{
      "name": "void * mem_trim(void *rmem, mem_size_t new_size)",
      "parameters": [
            [
                  {
                        "param_type": "void*",
                        "param_name": "rmem"
                  },
                  {
                        "param_type": "mem_size_t",
                        "param_name": "new_size"
                  }
            ]
      ],
      "begin": 699,
      "end": 819,
      "returns": [
            {
                  "begin": 717,
                  "end": 717,
                  "need_brackets": false,
                  "returned_value": "NULL",
                  "return_warning": ""
            },
            {
                  "begin": 727,
                  "end": 727,
                  "need_brackets": false,
                  "returned_value": "rmem",
                  "return_warning": ""
            },
            {
                  "begin": 742,
                  "end": 742,
                  "need_brackets": false,
                  "returned_value": "NULL",
                  "return_warning": ""
            },
            {
                  "begin": 746,
                  "end": 746,
                  "need_brackets": false,
                  "returned_value": "rmem",
                  "return_warning": ""
            },
            {
                  "begin": 818,
                  "end": 818,
                  "need_brackets": false,
                  "returned_value": "rmem",
                  "return_warning": ""
            }
      ],
      "warnings": [],
      "revember_artifacts": []
}{
      "name": "void * mem_malloc(mem_size_t size_in)",
      "parameters": [
            [
                  {
                        "param_type": "mem_size_t",
                        "param_name": "size_in"
                  }
            ]
      ],
      "begin": 831,
      "end": 975,
      "returns": [
            {
                  "begin": 840,
                  "end": 840,
                  "need_brackets": false,
                  "returned_value": "NULL",
                  "return_warning": ""
            },
            {
                  "begin": 854,
                  "end": 854,
                  "need_brackets": false,
                  "returned_value": "NULL",
                  "return_warning": ""
            },
            {
                  "begin": 963,
                  "end": 963,
                  "need_brackets": false,
                  "returned_value": "(u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET",
                  "return_warning": "compound return value"
            },
            {
                  "begin": 974,
                  "end": 974,
                  "need_brackets": false,
                  "returned_value": "NULL",
                  "return_warning": ""
            }
      ],
      "warnings": [],
      "revember_artifacts": []
}{
      "name": "void * mem_calloc(mem_size_t count, mem_size_t size)",
      "parameters": [
            [
                  {
                        "param_type": "mem_size_t",
                        "param_name": "count"
                  },
                  {
                        "param_type": "mem_size_t",
                        "param_name": "size"
                  }
            ]
      ],
      "begin": 999,
      "end": 1015,
      "returns": [
            {
                  "begin": 1005,
                  "end": 1005,
                  "need_brackets": false,
                  "returned_value": "NULL",
                  "return_warning": ""
            },
            {
                  "begin": 1014,
                  "end": 1014,
                  "need_brackets": false,
                  "returned_value": "p",
                  "return_warning": ""
            }
      ],
      "warnings": [],
      "revember_artifacts": []
}